Assignment "ksum"
project folder:
Prism_Assignement

Brief description of submitted files: 

kSum.py
- Printing output triplets with three numbers
- includes method bruteforce() for bruteforce serach of corresponding sum
- includes method sorted() for sorted serach of corresponding sum
- includes main() method

numbers.dat
- file with target sum, number of digits to be summed and actual list of numbers to find sum in

RUN
- file with program output

* How to run your script or function
- Clone github repository
- run SalesMan.py from the shell 

* Implement a brute-force solution. What's the running time of this solution,
   as a function of n and k, where n in the length of the input set?
   
- Big O or average complexity of bruteforce algorithm will be O(N^3). 

* Implement a more time efficient solution - ideally a solution with lowest
   possible running time. What's the running time of your solution? Do you
   think it's possible to do better? Why or why not?
   
- sorted solution is more effective and has complexity O(n^2)
- not sure if it's possible to do better
- it's interesting to implement k-sum algorithm with 2sum or 3 sum as a base case.

* if you ran out of time, what you were hoping to do next
- implement more general k-sum task
- add try catch exseptions